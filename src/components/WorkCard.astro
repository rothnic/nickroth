---
export interface Props {
  title: string;
  description: string;
  company: string;
  role: string;
  slug: string;
  tags?: string[] | undefined;
  image?: string | undefined;
  category?: string | undefined;
  impact?: string | undefined;
  stack?: string[] | undefined;
  roleCategory?: string | undefined;
}

const { 
  title, 
  description, 
  slug, 
  tags = [], 
  image, 
  category,
  impact,
  stack = [],
  roleCategory
} = Astro.props;

const PLACEHOLDER_IMAGE = 'https://placehold.co/600x400';
const imageSrc = image?.trim() ? image : PLACEHOLDER_IMAGE;

// Define color schemes for different categories
const getCategoryColor = (cat: string | undefined) => {
  switch (cat) {
    case 'HEADLESS CMS': return 'badge-primary';
    case 'WEB PLATFORMS': return 'badge-secondary';
    case 'MARKETING AUTOMATION': return 'badge-accent';
    case 'AUTOMATION & AI': return 'badge-warning';
    case 'CHROME EXTENSIONS': return 'badge-info';
    case 'SYSTEMS': return 'badge-success';
    default: return 'badge-outline';
  }
};

const getStackColor = (tech: string) => {
  const lowerTech = tech.toLowerCase();
  if (lowerTech.includes('astro') || lowerTech.includes('datocms')) return 'badge-primary';
  if (lowerTech.includes('n8n') || lowerTech.includes('windmill')) return 'badge-warning';
  if (lowerTech.includes('chrome') || lowerTech.includes('openai')) return 'badge-info';
  if (tech.includes('+')) return 'badge-success';
  return 'badge-outline';
};
---

<div transition:name={`work-container-${slug}`} class="card bg-base-100 shadow-xl hover:shadow-2xl transition-all duration-300 hover:scale-[1.02] border-2 border-base-300">
  <figure class="relative">
    <img transition:name={`work-img-${slug}`} src={imageSrc} alt={title} class="h-48 w-full object-cover" loading="lazy" />
    <div class="absolute top-4 left-4">
      {category && (
        <div class={`badge ${getCategoryColor(category)} badge-sm text-xs font-semibold`}>
          {category}
        </div>
      )}
    </div>
  </figure>
  
  <div class="card-body p-6">
    <h2 transition:name={`work-title-${slug}`} class="card-title text-xl font-bold mb-2">
      {title}
    </h2>
    
    {impact && (
      <p class="text-sm font-semibold text-primary mb-3 uppercase leading-tight">
        {impact}
      </p>
    )}
    
    {roleCategory && (
      <div class="mb-3">
        <span class="text-xs font-semibold text-accent uppercase tracking-wider">
          {roleCategory}
        </span>
      </div>
    )}
    
    <p class="text-sm text-base-content/80 mb-4 line-clamp-2">
      {description}
    </p>
    
    {/* Technology Stack */}
    {stack.length > 0 && (
      <div class="mb-4">
        <div class="flex flex-wrap gap-2">
          {stack.map((tech) => (
            <div class={`badge ${getStackColor(tech)} badge-sm text-xs font-medium`}>
              {tech}
            </div>
          ))}
        </div>
      </div>
    )}
    
    {/* Original tags as secondary info */}
    {tags.length > 0 && (
      <div class="mb-4">
        <div class="flex flex-wrap gap-1">
          {tags.slice(0, 3).map((tag) => (
            <div class="badge badge-ghost badge-xs">
              {tag}
            </div>
          ))}
          {tags.length > 3 && (
            <div class="badge badge-ghost badge-xs">
              +{tags.length - 3}
            </div>
          )}
        </div>
      </div>
    )}
    
    <div class="card-actions justify-end mt-auto">
      <a href={`/work/${slug}`} class="btn btn-primary btn-sm">
        View Details
      </a>
    </div>
  </div>
</div>