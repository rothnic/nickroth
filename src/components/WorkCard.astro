---
export interface Props {
	title: string;
	description: string;
	company: string;
	role: string;
	slug: string;
	tags?: string[] | undefined;
	image?: string | undefined;
	category?: string | undefined;
	impact?: string | undefined;
	stack?: string[] | undefined;
	roleCategory?: string | undefined;
}

const {
	title,
	description,
	slug,
	tags = [],
	image,
	category,
	impact,
	stack = [],
	roleCategory,
} = Astro.props;

const PLACEHOLDER_IMAGE = "https://placehold.co/600x400";
const imageSrc = image?.trim() ? image : PLACEHOLDER_IMAGE;

// Define color schemes for different categories
const getCategoryColor = (cat: string | undefined) => {
	switch (cat) {
		case "HEADLESS CMS":
			return "badge-primary";
		case "WEB PLATFORMS":
			return "badge-secondary";
		case "MARKETING AUTOMATION":
			return "badge-accent";
		case "AUTOMATION & AI":
			return "badge-warning";
		case "CHROME EXTENSIONS":
			return "badge-info";
		case "SYSTEMS":
			return "badge-success";
		default:
			return "badge-outline";
	}
};

const getStackColor = (tech: string) => {
	const lowerTech = tech.toLowerCase();
	if (lowerTech.includes("astro") || lowerTech.includes("datocms"))
		return "badge-primary";
	if (lowerTech.includes("n8n") || lowerTech.includes("windmill"))
		return "badge-warning";
	if (lowerTech.includes("chrome") || lowerTech.includes("openai"))
		return "badge-info";
	if (lowerTech.includes("langchain")) return "badge-success";
	if (tech.includes("+")) return "badge-success";
	return "badge-outline";
};

const getTagColor = (tag: string) => {
	const lowerTag = tag.toLowerCase();
	if (lowerTag.includes("headless") || lowerTag.includes("cms"))
		return "badge-primary";
	if (lowerTag.includes("web") || lowerTag.includes("platform"))
		return "badge-secondary";
	if (lowerTag.includes("marketing") || lowerTag.includes("automation"))
		return "badge-accent";
	if (lowerTag.includes("systems")) return "badge-success";
	return "badge-outline";
};
---

<a 
  href={`/work/${slug}`}
  class="card bg-base-100 shadow-xl hover:shadow-2xl transition-all duration-300 hover:scale-[1.02] border-2 border-base-300 h-full block cursor-pointer" 
  data-work-card 
  data-category={category}
  data-card-id={slug}
  data-scroll-target
  transition:name={`work-card-${slug}`}
>
  <!-- Category Badge at Top - Positioned absolutely over image -->
  {category && (
    <div class="absolute top-1 left-1 sm:top-2 sm:left-2 z-10">
      <span transition:name={`work-category-${slug}`}class={`badge ${getCategoryColor(category)} badge-xs sm:badge-sm font-bold text-[0.6rem] sm:text-xs uppercase`}>
        {category}
      </span>
    </div>
  )}
  
  <!-- Hero Image - responsive sizes -->
  <figure class="relative h-32 sm:h-48 w-full">
    <img transition:name={`work-img-${slug}`} src={imageSrc} alt={title} class="w-full h-full object-cover" loading="lazy" />
  </figure>
  
  <div class="card-body p-2 sm:p-4">
    <!-- Project Title -->
    <h2 transition:name={`work-title-${slug}`} class="text-sm sm:text-lg font-bold mb-1 sm:mb-2 leading-tight">
      {title}
    </h2>
    
    <!-- Impact Statement - Prominent Display in Primary Color -->
    {impact && (
      <div class="mb-1 sm:mb-2">
        <p class="text-[0.6rem] sm:text-xs font-bold text-primary uppercase leading-tight tracking-wide">
          {impact}
        </p>
      </div>
    )}
    
    <!-- Limited Tags (2-3 with muted display) -->
    {tags.length > 0 && (
      <div>
        <div class="flex flex-wrap gap-0.5 sm:gap-1">
          {tags.slice(0, 3).map((tag) => (
            <span class="badge badge-outline badge-xs text-[0.6rem] sm:text-xs">
              {tag}
            </span>
          ))}
        </div>
      </div>
    )}
  </div>
</a>