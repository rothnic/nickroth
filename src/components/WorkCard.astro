---
export interface Props {
  title: string;
  description: string;
  company: string;
  role: string;
  slug: string;
  tags?: string[] | undefined;
  image?: string | undefined;
  category?: string | undefined;
  impact?: string | undefined;
  stack?: string[] | undefined;
  roleCategory?: string | undefined;
  variant?: 'compact' | 'interactive';
}

const {
  title,
  description,
  company,
  role,
  slug,
  tags = [],
  image,
  category,
  impact,
  stack = [],
  roleCategory,
  variant = 'compact',
} = Astro.props;

const PLACEHOLDER_IMAGE = 'https://placehold.co/600x400';
const imageSrc = image?.trim() ? image : PLACEHOLDER_IMAGE;

const visibleTags = tags.slice(0, 3);
const extraTagCount = Math.max(tags.length - visibleTags.length, 0);

const viewTransitionName = `work-card-${slug}`;

const metaInfo = [company, role].filter(Boolean).join(' â€¢ ');

const getStackColor = (tech: string) => {
  const lowerTech = tech.toLowerCase();
  if (lowerTech.includes('astro') || lowerTech.includes('datocms')) return 'badge-primary';
  if (lowerTech.includes('n8n') || lowerTech.includes('windmill')) return 'badge-warning';
  if (lowerTech.includes('chrome') || lowerTech.includes('openai')) return 'badge-info';
  if (lowerTech.includes('langchain')) return 'badge-success';
  if (tech.includes('+')) return 'badge-success';
  return 'badge-outline';
};
---

{variant === 'interactive' ? (
  <details
    class="group relative h-full overflow-hidden rounded-[32px] border-2 border-base-300/80 bg-base-100/90 shadow-brutal transition-all duration-300 open:shadow-brutal-dark"
    data-work-card
    data-category={category}
    data-slug={slug}
    style={{ viewTransitionName }}
  >
    <summary class="list-none cursor-pointer">
      <div class="relative overflow-hidden rounded-[28px] border-b border-base-300/60">
        <div class="relative aspect-[4/3] overflow-hidden bg-base-300/40">
          <img
            src={imageSrc}
            alt={title}
            loading="lazy"
            class="h-full w-full object-cover transition-transform duration-500 ease-out group-open:scale-[1.04] group-open:rotate-1 group-hover:scale-[1.04]"
          />
          <div class="pointer-events-none absolute inset-0 bg-gradient-to-br from-primary/15 via-transparent to-accent/20 mix-blend-screen"></div>
          <div class="pointer-events-none absolute inset-3 rounded-[24px] border border-dashed border-base-content/10"></div>
        </div>
        <div class="flex flex-col gap-5 px-8 py-7 text-left">
          <div class="flex flex-wrap items-center gap-3 text-[0.65rem] font-semibold uppercase tracking-[0.32em] text-base-content/60">
            {category && <span>{category}</span>}
            {roleCategory && (
              <span class="rounded-full border border-base-300/80 px-3 py-1 text-[0.6rem] tracking-[0.32em]">
                {roleCategory}
              </span>
            )}
          </div>
          <h3 class="text-2xl font-semibold leading-snug tracking-tight text-base-content">
            {title}
          </h3>
          <p class="text-sm leading-relaxed text-base-content/80 max-w-prose">{description}</p>
          {impact && (
            <p class="text-xs font-semibold uppercase tracking-[0.4em] text-primary/90">{impact}</p>
          )}
          <div class="flex items-center justify-between text-xs font-semibold uppercase tracking-[0.32em] text-base-content/60">
            <span>Tap to expand</span>
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 transition-transform duration-300 group-open:rotate-45" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1.5">
              <path stroke-linecap="round" stroke-linejoin="round" d="M12 4v16m8-8H4" />
            </svg>
          </div>
        </div>
      </div>
    </summary>
    <div class="space-y-6 px-8 pb-8 pt-6 text-left">
      {visibleTags.length > 0 && (
        <div class="flex flex-wrap items-center gap-2 text-xs text-base-content/70">
          {visibleTags.map((tag) => (
            <span class="badge badge-ghost badge-sm uppercase tracking-wide">{tag}</span>
          ))}
          {extraTagCount > 0 && (
            <span class="badge badge-outline badge-sm uppercase tracking-wide">+{extraTagCount}</span>
          )}
        </div>
      )}

      {stack.length > 0 && (
        <div class="flex flex-wrap gap-2">
          {stack.slice(0, 6).map((tech) => (
            <span class={`badge ${getStackColor(tech)} badge-sm font-medium text-[0.7rem]`}>{tech}</span>
          ))}
          {stack.length > 6 && (
            <span class="badge badge-outline badge-sm font-medium text-[0.7rem]">+{stack.length - 6}</span>
          )}
        </div>
      )}

      {metaInfo && (
        <div class="flex flex-wrap gap-4 rounded-2xl border border-base-300/60 bg-base-100/70 px-5 py-4 text-[0.68rem] font-semibold uppercase tracking-[0.28em] text-base-content/60">
          {metaInfo}
        </div>
      )}

      <div class="grid gap-3 rounded-2xl border border-base-300/70 bg-base-100/80 p-5">
        <div class="flex flex-wrap items-center justify-between gap-2 text-xs uppercase tracking-[0.32em] text-base-content/60">
          <span>Case study</span>
          <span>{category || 'Systems Work'}</span>
        </div>
        <a
          href={`/work/${slug}`}
          class="inline-flex items-center justify-between gap-3 rounded-2xl border-2 border-base-300/70 bg-base-100 px-5 py-3 text-sm font-semibold uppercase tracking-[0.32em] text-base-content transition-all duration-200 hover:-translate-y-1 hover:border-primary hover:text-primary"
        >
          View full build
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M3 10a.75.75 0 0 1 .75-.75h9.19l-3.22-3.22a.75.75 0 1 1 1.06-1.06l4.5 4.5a.75.75 0 0 1 0 1.06l-4.5 4.5a.75.75 0 1 1-1.06-1.06l3.22-3.22H3.75A.75.75 0 0 1 3 10Z" clip-rule="evenodd" />
          </svg>
        </a>
      </div>
    </div>
  </details>
) : (
  <a
    href={`/work/${slug}`}
    class="group relative flex h-full flex-col overflow-hidden rounded-[32px] border-2 border-base-300/80 bg-base-100/90 shadow-brutal transition-all duration-300 hover:-translate-y-2 hover:shadow-brutal-dark focus:outline-none focus-visible:ring-4 focus-visible:ring-primary/40"
    data-work-card
    data-category={category}
    style={{ viewTransitionName }}
    aria-label={`View case study: ${title}`}
  >
    <div class="relative aspect-[16/11] overflow-hidden bg-base-300/60">
      <img
        src={imageSrc}
        alt={title}
        loading="lazy"
        class="h-full w-full object-cover transition-transform duration-500 ease-out group-hover:scale-[1.04] group-hover:rotate-1"
      />
      <div class="pointer-events-none absolute inset-0 bg-gradient-to-br from-primary/20 via-transparent to-accent/20 mix-blend-screen"></div>
      <div class="pointer-events-none absolute inset-3 rounded-[24px] border border-dashed border-base-content/10"></div>
    </div>

    <div class="flex flex-1 flex-col gap-6 px-8 py-7">
      <div class="space-y-4">
        <div class="flex items-center gap-3 text-xs font-semibold uppercase tracking-[0.35em] text-base-content/60">
          {category && <span>{category}</span>}
          {roleCategory && (
            <span class="rounded-full border border-base-300/80 px-3 py-1 text-[0.62rem] tracking-[0.35em]">
              {roleCategory}
            </span>
          )}
        </div>

        <h3 class="text-2xl font-semibold leading-snug tracking-tight text-base-content">
          {title}
        </h3>

        <p class="max-w-prose text-sm leading-relaxed text-base-content/80">{description}</p>

        {impact && (
          <p class="text-sm font-semibold uppercase tracking-[0.35em] text-primary">{impact}</p>
        )}
      </div>

      <div class="space-y-3 text-xs text-base-content/70">
        {visibleTags.length > 0 && (
          <div class="flex flex-wrap items-center gap-2">
            {visibleTags.map((tag) => (
              <span class="badge badge-ghost badge-sm uppercase tracking-wide">{tag}</span>
            ))}
            {extraTagCount > 0 && (
              <span class="badge badge-outline badge-sm uppercase tracking-wide">+{extraTagCount}</span>
            )}
          </div>
        )}

        {stack.length > 0 && (
          <div class="flex flex-wrap gap-2">
            {stack.slice(0, 4).map((tech) => (
              <span class={`badge ${getStackColor(tech)} badge-sm font-medium text-[0.7rem]`}>{tech}</span>
            ))}
            {stack.length > 4 && (
              <span class="badge badge-outline badge-sm font-medium text-[0.7rem]">+{stack.length - 4}</span>
            )}
          </div>
        )}
      </div>

      <div class="mt-auto flex items-center justify-between text-sm font-medium">
        <span class="uppercase tracking-[0.35em] text-base-content/60">View case</span>
        <span class="inline-flex h-10 w-10 items-center justify-center rounded-full border border-neutral/80 bg-base-100 transition-transform duration-300 group-hover:translate-x-1 group-hover:-translate-y-1">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M3 10a.75.75 0 0 1 .75-.75h9.19l-3.22-3.22a.75.75 0 1 1 1.06-1.06l4.5 4.5a.75.75 0 0 1 0 1.06l-4.5 4.5a.75.75 0 1 1-1.06-1.06l3.22-3.22H3.75A.75.75 0 0 1 3 10Z" clip-rule="evenodd" />
          </svg>
        </span>
      </div>
    </div>
  </a>
)}

<style>
  details[data-work-card] summary::-webkit-details-marker {
    display: none;
  }

  details[data-work-card][open] {
    box-shadow: var(--tw-shadow), 0 18px 32px rgba(17, 24, 39, 0.16);
  }

  details[data-work-card]:focus-visible {
    outline: none;
  }

  details[data-work-card] summary {
    outline: none;
  }
</style>
