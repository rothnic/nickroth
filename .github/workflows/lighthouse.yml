name: Lighthouse CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.16.0'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.11.1

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run Lighthouse audit
        run: pnpm run audit
        
      - name: Read Lighthouse scores
        id: lighthouse
        run: |
          PERF=$(jq '.categories.performance.score * 100 | round' lighthouse-report.json)
          A11Y=$(jq '.categories.accessibility.score * 100 | round' lighthouse-report.json)
          BP=$(jq '.categories["best-practices"].score * 100 | round' lighthouse-report.json)
          SEO=$(jq '.categories.seo.score * 100 | round' lighthouse-report.json)
          
          echo "performance=$PERF" >> $GITHUB_OUTPUT
          echo "accessibility=$A11Y" >> $GITHUB_OUTPUT
          echo "best-practices=$BP" >> $GITHUB_OUTPUT
          echo "seo=$SEO" >> $GITHUB_OUTPUT
          
          echo "### üîç Lighthouse Scores" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Category | Score | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Performance | $PERF | $([ $PERF -ge 95 ] && echo '‚úÖ' || echo '‚ö†Ô∏è') |" >> $GITHUB_STEP_SUMMARY
          echo "| Accessibility | $A11Y | $([ $A11Y -ge 95 ] && echo '‚úÖ' || echo '‚ö†Ô∏è') |" >> $GITHUB_STEP_SUMMARY
          echo "| Best Practices | $BP | $([ $BP -ge 95 ] && echo '‚úÖ' || echo '‚ö†Ô∏è') |" >> $GITHUB_STEP_SUMMARY
          echo "| SEO | $SEO | $([ $SEO -ge 95 ] && echo '‚úÖ' || echo '‚ö†Ô∏è') |" >> $GITHUB_STEP_SUMMARY

      - name: Check minimum thresholds
        run: |
          PERF=${{ steps.lighthouse.outputs.performance }}
          A11Y=${{ steps.lighthouse.outputs.accessibility }}
          BP=${{ steps.lighthouse.outputs.best-practices }}
          SEO=${{ steps.lighthouse.outputs.seo }}
          
          echo "Performance: $PERF (minimum: 90)"
          echo "Accessibility: $A11Y (minimum: 90)"
          echo "Best Practices: $BP (minimum: 95)"
          echo "SEO: $SEO (minimum: 95)"
          
          if [ $PERF -lt 90 ]; then
            echo "‚ùå Performance score ($PERF) is below minimum threshold (90)"
            exit 1
          fi
          
          if [ $A11Y -lt 90 ]; then
            echo "‚ùå Accessibility score ($A11Y) is below minimum threshold (90)"
            exit 1
          fi
          
          if [ $BP -lt 95 ]; then
            echo "‚ùå Best Practices score ($BP) is below minimum threshold (95)"
            exit 1
          fi
          
          if [ $SEO -lt 95 ]; then
            echo "‚ùå SEO score ($SEO) is below minimum threshold (95)"
            exit 1
          fi
          
          echo "‚úÖ All Lighthouse scores meet minimum thresholds!"

      - name: Upload Lighthouse report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-report-${{ github.run_number }}
          path: lighthouse-report.json
          retention-days: 90
      
      - name: Save historical scores
        if: github.ref == 'refs/heads/main'
        run: |
          # Create a simple CSV file with timestamp and scores
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          COMMIT="${{ github.sha }}"
          PERF=${{ steps.lighthouse.outputs.performance }}
          A11Y=${{ steps.lighthouse.outputs.accessibility }}
          BP=${{ steps.lighthouse.outputs.best-practices }}
          SEO=${{ steps.lighthouse.outputs.seo }}
          
          # Create scores history file
          echo "$TIMESTAMP,$COMMIT,$PERF,$A11Y,$BP,$SEO" > lighthouse-scores.csv
          
      - name: Upload scores history
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-scores-history
          path: lighthouse-scores.csv
          retention-days: 365

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const perf = ${{ steps.lighthouse.outputs.performance }};
            const a11y = ${{ steps.lighthouse.outputs.accessibility }};
            const bp = ${{ steps.lighthouse.outputs['best-practices'] }};
            const seo = ${{ steps.lighthouse.outputs.seo }};
            
            const status = (score, threshold) => score >= threshold ? '‚úÖ' : '‚ö†Ô∏è';
            
            const comment = `## üîç Lighthouse Performance Report
            
            | Category | Score | Status |
            |----------|-------|--------|
            | Performance | ${perf} | ${status(perf, 90)} |
            | Accessibility | ${a11y} | ${status(a11y, 90)} |
            | Best Practices | ${bp} | ${status(bp, 95)} |
            | SEO | ${seo} | ${status(seo, 95)} |
            
            ### Thresholds
            - Performance: **90+** required
            - Accessibility: **90+** required
            - Best Practices: **95+** required
            - SEO: **95+** required
            
            [View full Lighthouse report in artifacts ‚Üí](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
